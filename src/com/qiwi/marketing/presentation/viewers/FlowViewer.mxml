<?xml version="1.0"?>
<!--
  Created by v.pavkin on 18.04.2014.
-->
<presentation:PageBase xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:presentation="com.qiwi.marketing.presentation.*"
					   xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Declarations>
		<mx:SolidColorStroke id="axisStroke" color="#2266bb"
							 weight="8" caps="square"/>
	</fx:Declarations>
	<fx:Script><![CDATA[
		import com.qiwi.marketing.project.ProjectVersion;
		import com.qiwi.marketing.project.scenarios.FlowEntryData;
		import com.qiwi.marketing.project.scenarios.ProjectFlow;
		import com.qiwi.marketing.project.scenarios.ScenarioProcessor;
		import com.qiwi.marketing.utils.VectorUtils;

		import mx.charts.ChartItem;
		import mx.charts.HitData;
		import mx.charts.chartClasses.Series;
		import mx.charts.events.ChartItemEvent;
		import mx.collections.ArrayCollection;

		protected var _selectedDate:Object;
		protected var _selectedScenario:ProjectFlow;
		protected var _selectedVersion:ProjectVersion;

		[Bindable]
		protected var _dataProvider:ArrayCollection;
		[Bindable]
		protected var _scenarios:ArrayCollection;
		[Bindable]
		protected var _versions:ArrayCollection;

		override protected function onShow(e:Event = null):void {
			super.onShow(e);
			dateComboBox.executeBindings(true);
			reset()

			for (var j:int = 0; j < dateComboBox.dataProvider.length; j++) {
				if (dateComboBox.dataProvider.getItemAt(j).date == Context.currentDate) {
					dateComboBox.selectedItem = dateComboBox.dataProvider.getItemAt(j);
					onSelectedDateChanged();
					break;
				}
			}
			updateScenarios();
			updateVersions();
		}
		private function reset():void {
			viewer.dataProvider = null;
			_selectedDate = null;
			_selectedScenario = null;
			_selectedVersion = ProjectVersion.ALL_VERSIONS;
			versionComboBox.selectedIndex = dateComboBox.selectedIndex = scenarioComboBox.selectedIndex = -1;
		}

		protected function updateScenarios():void {
			_scenarios = VectorUtils.toArrayCollection(_project.flows)
		}

		private function updateVersions():void {
			var v:ArrayCollection = VectorUtils.toArrayCollection(_project.versions)
			v.addItemAt(ProjectVersion.ALL_VERSIONS, 0);
			_versions = v;
			versionComboBox.toolTip = _versions.length > 1 ? "" : "Не было загружено ни одного дня данных.\nВерсии для фильтрации появятся после первого загруженного дня.";
		}

		private function onSelectedDateChanged():void {
			if (dateComboBox.selectedItem && dateComboBox.selectedItem != _selectedDate) {
				_selectedDate = dateComboBox.selectedItem;
				checkChange()
			}
		}

		private function onSelectedScenarioChanged():void {
			if (scenarioComboBox.selectedItem && scenarioComboBox.selectedItem != _selectedScenario) {
				_selectedScenario = scenarioComboBox.selectedItem;
				checkChange()
			}
		}

		private function onSelectedVersionChanged():void {
			_selectedVersion = versionComboBox.selectedItem;
			checkChange()
		}

		protected function checkChange():void {
			if (!dateComboBox.selectedItem || !scenarioComboBox.selectedItem)
				return;

			var flow:Vector.<FlowEntryData> = getData();
			_dataProvider = VectorUtils.toArrayCollection(flow);
			if (_dataProvider.length < 8) {
				viewer.percentWidth = 100;
			} else {
				viewer.width = _dataProvider.length * 200;
			}
			updateVersions()
		}

		protected function getData():* {
			var flow:Vector.<FlowEntryData> = ScenarioProcessor.getFlowData(_project, _selectedDate.date, _selectedScenario, _selectedVersion)
			return flow;
		}

		override protected function get displayName():String {
			return "Flow Viewer";
		}

		public function get totalEnters():int {
			return viewer.dataProvider.getItemAt(0).enters;
		}

		private function tipFunction(hd:HitData):String {
			var series:ColumnSeries = ColumnSeries(hd.element);
			return hd.item.entryName + "\n" + series.displayName + ":\n" + (hd.item[series.yField].toPrecision(3));
		}
		private function entersLabelFunc(element:ChartItem, series:Series):String {
			return  element.item.enters + "\n" + ((element.item.enters / totalEnters ) * 100).toPrecision(3) + "%";
		}
		private function paymentsLabelFunc(element:ChartItem, series:Series):String {
			return element.item.payments + "\n" + ((element.item.payments / totalEnters) * 100).toPrecision(3) + "%";
		}
		private function averageTimeLabelFunc(element:ChartItem, series:Series):String {
			return element.item.averageTime.toPrecision(3) + " сек.";
		}
		private function longestTimeLabelFunc(element:ChartItem, series:Series):String {
			return element.item.longestTime.toPrecision(3) + " сек.";
		}
		private function shortestTimeLabelFunc(element:ChartItem, series:Series):String {
			return element.item.shortestTime.toPrecision(3) + " сек.";
		}

		private function onChartItemClick(event:ChartItemEvent):void {
			System.setClipboard(event.hitData.item.toClipboardText(totalEnters));
		}

		private function onShowTimeChange(event:Event):void {
			if (timeCheckBox.selected) {
				viewer.series = [enterSeries, paymentSeries, averageTimeSeries];
			} else {
				viewer.series = [enterSeries, paymentSeries];
			}
		}
		]]></fx:Script>

	<s:VGroup height="100%" width="100%">
		<s:HGroup gap="20">
			<s:Label text="Выберите дату и сценарий:"/>
			<s:ComboBox id="dateComboBox" dataProvider="{_project.visitsOverview}" labelField="date"
						requireSelection="false"
						change="onSelectedDateChanged()"/>
			<s:ComboBox id="scenarioComboBox" dataProvider="{_scenarios}" width="400" labelField="name"
						requireSelection="false"
						change="onSelectedScenarioChanged()"/>
			<s:ComboBox id="versionComboBox" dataProvider="{_versions}" labelField="value"
						requireSelection="true"
						change="onSelectedVersionChanged()"/>
			<s:CheckBox id="timeCheckBox" selected="true" label="Показывать время" change="onShowTimeChange(event)"/>
		</s:HGroup>
		<s:Label text="Результаты:"/>
		<s:Group id="myGroup"
				 height="100%"
				 width="100%"
				 clipAndEnableScrolling="true"
				 horizontalScrollPosition="0">
			<mx:ColumnChart id="viewer"
							height="100%"
							width="2000"
							showDataTips="true"
							dataTipFunction="tipFunction"
							dataProvider="{_dataProvider}"
							styleName="customClass"
							itemClick="onChartItemClick(event)"
				>
				<mx:horizontalAxis>
					<mx:CategoryAxis id="horAxis" categoryField="entryLabel"/>
				</mx:horizontalAxis>
				<mx:verticalAxis>
					<mx:LinearAxis id="verAxis"/>
				</mx:verticalAxis>

				<mx:horizontalAxisRenderers>
					<mx:AxisRenderer axis="{horAxis}">
						<mx:axisStroke>{axisStroke}</mx:axisStroke>
					</mx:AxisRenderer>
				</mx:horizontalAxisRenderers>
				<mx:verticalAxisRenderers>
					<mx:AxisRenderer placement="left" axis="{verAxis}">
						<mx:axisStroke>{axisStroke}</mx:axisStroke>
					</mx:AxisRenderer>
					<mx:AxisRenderer placement="right" axis="{timeAxis}">
						<mx:axisStroke>{axisStroke}</mx:axisStroke>
					</mx:AxisRenderer>
				</mx:verticalAxisRenderers>
				<mx:series>
					<mx:ColumnSeries
						id="enterSeries"
						labelPosition="outside"
						xField="entryLabel"
						labelFunction="entersLabelFunc"
						yField="enters"
						displayName="Дошли"
						verticalAxis="{verAxis}"
						>
						<mx:fill>
							<mx:SolidColor color="0x2266bb"/>
						</mx:fill>
						<mx:stroke>
							<mx:SolidColorStroke color="#000000"/>
						</mx:stroke>
					</mx:ColumnSeries>
					<mx:ColumnSeries
						id="paymentSeries"
						labelPosition="outside"
						xField="entryLabel"
						labelFunction="paymentsLabelFunc"
						yField="payments"
						displayName="Оплатили"
						verticalAxis="{verAxis}"
						>
						<mx:fill>
							<mx:SolidColor color="#ff8100"/>
						</mx:fill>
						<mx:stroke>
							<mx:SolidColorStroke color="#000000"/>
						</mx:stroke>
					</mx:ColumnSeries>
					<!--<mx:ColumnSeries-->
					<!--labelPosition="outside"-->
					<!--xField="entryLabel"-->
					<!--yField="shortestTime"-->
					<!--labelFunction="longestTimeLabelFunc"-->
					<!--displayName="Кратчайшее время"-->
					<!--verticalAxis="{timeAxis}"-->
					<!-->-->
					<!--<mx:fill>-->
					<!--<mx:SolidColor color="0x5dbb38"/>-->
					<!--</mx:fill>-->
					<!--<mx:stroke>-->
					<!--<mx:SolidColorStroke color="#000000"/>-->
					<!--</mx:stroke>-->
					<!--</mx:ColumnSeries>-->

					<mx:ColumnSeries
						id="averageTimeSeries"
						labelPosition="outside"
						xField="entryLabel"
						yField="averageTime"
						labelFunction="averageTimeLabelFunc"
						displayName="Среднее время"
						>
						<mx:fill>
							<mx:SolidColor color="0x4a8e28"/>
						</mx:fill>
						<mx:stroke>
							<mx:SolidColorStroke color="#000000"/>
						</mx:stroke>
						<mx:verticalAxis>
							<mx:LinearAxis id="timeAxis"/>
						</mx:verticalAxis>
					</mx:ColumnSeries>
					<!--<mx:ColumnSeries-->
					<!--labelPosition="outside"-->
					<!--xField="entryLabel"-->
					<!--yField="longestTime"-->
					<!--labelFunction="longestTimeLabelFunc"-->
					<!--displayName="Длиннейшее время"-->
					<!--verticalAxis="{timeAxis}"-->
					<!-->-->
					<!--<mx:fill>-->
					<!--<mx:SolidColor color="0xee453e"/>-->
					<!--</mx:fill>-->
					<!--<mx:stroke>-->
					<!--<mx:SolidColorStroke color="#000000"/>-->
					<!--</mx:stroke>-->
					<!--</mx:ColumnSeries>-->
				</mx:series>
			</mx:ColumnChart>
			<mx:Legend right="30" top="30" dataProvider="{viewer}" fontSize="24"/>
		</s:Group>
		<s:HScrollBar viewport="{myGroup}" width="100%"/>
		<s:Button label="Назад на «{_project.displayName}»" click="goToProjectInfo()"/>
	</s:VGroup>
</presentation:PageBase>
