<?xml version="1.0"?>
<!--
  Created by v.pavkin on 18.04.2014.
-->
<presentation:PageBase xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:presentation="com.qiwi.marketing.presentation.*" xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Declarations>
		<mx:SolidColorStroke id="axisStroke" color="#2266bb"
							 weight="8" caps="square"/>
	</fx:Declarations>
	<fx:Script><![CDATA[
		import com.qiwi.marketing.project.ProjectVersion;
		import com.qiwi.marketing.project.scenarios.FlowEntryData;
		import com.qiwi.marketing.project.scenarios.ProjectFlow;
		import com.qiwi.marketing.project.scenarios.ScenarioProcessor;
		import com.qiwi.marketing.utils.VectorUtils;

		import mx.charts.ChartItem;
		import mx.charts.HitData;
		import mx.charts.chartClasses.Series;
		import mx.collections.ArrayCollection;

		private var _selectedDate:String;
		private var _selectedFlow:ProjectFlow;
		private var _selectedVersion:ProjectVersion;

		[Bindable]
		private var _dataProvider:ArrayCollection;
		[Bindable]
		private var _flows:ArrayCollection;
		[Bindable]
		private var _versions:ArrayCollection;

		override protected function onShow(e:Event = null):void {
			super.onShow(e);
			reset()
			updateFlows();
			updateVersions();
		}
		private function reset():void {
			viewer.dataProvider = null;
			_selectedDate = null;
			_selectedFlow = null;
			_selectedVersion = ProjectVersion.ALL_VERSIONS;
			versionComboBox.selectedIndex = dateComboBox.selectedIndex = flowComboBox.selectedIndex = -1;
		}

		private function updateFlows():void {
			_flows = VectorUtils.toArrayCollection(_project.flows)
		}

		private function updateVersions():void {
			var v:ArrayCollection = VectorUtils.toArrayCollection(_project.versions)
			v.addItemAt(ProjectVersion.ALL_VERSIONS, 0);
			_versions = v;
			versionComboBox.toolTip = _versions.length > 1 ? "" : "Не было загружено ни одного дня данных.\nВерсии для фильтрации появятся после первого загруженного дня.";
		}

		private function onSelectedDateChanged():void {
			if (dateComboBox.selectedItem && dateComboBox.selectedItem != _selectedDate) {
				_selectedDate = dateComboBox.selectedItem;
				checkChange()
			}
		}

		private function onSelectedFlowChanged():void {
			if (flowComboBox.selectedItem && flowComboBox.selectedItem != _selectedFlow) {
				_selectedFlow = flowComboBox.selectedItem;
				checkChange()
			}
		}

		private function onSelectedVersionChanged():void {
			_selectedVersion = versionComboBox.selectedItem;
			checkChange()
		}

		private function checkChange():void {
			if (!dateComboBox.selectedItem || !flowComboBox.selectedItem)
				return;

			var flow:Vector.<FlowEntryData> = ScenarioProcessor.getFlowData(_project, _selectedDate, _selectedFlow, _selectedVersion)
			_dataProvider = VectorUtils.toArrayCollection(flow);
			updateVersions()
		}

		override protected function get displayName():String {
			return "Flow Viewer";
		}

		private function tipFunction(hd:HitData):String {
			var series:ColumnSeries = ColumnSeries(hd.element);
			return hd.item.entryName + "\n" + series.displayName + ":\n" + hd.item[series.yField];
		}
		private function entersLabelFunc(element:ChartItem, series:Series):String {
			return  element.item.enters + "\n" + ((element.item.enters / viewer.dataProvider.getItemAt(0).enters) * 100).toPrecision(3) + "%";
		}
		private function paymentsLabelFunc(element:ChartItem, series:Series):String {
			return element.item.payments + "\n" + ((element.item.payments / viewer.dataProvider.getItemAt(0).enters) * 100).toPrecision(3) + "%";
		}
		]]></fx:Script>

	<s:VGroup height="100%" width="100%">
		<s:HGroup gap="20">
			<s:Label text="Choose date:"/>
			<s:ComboBox id="dateComboBox" dataProvider="{_project.datesAvailable}" requireSelection="false"
						change="onSelectedDateChanged()"/>
			<s:ComboBox id="flowComboBox" dataProvider="{_flows}" width="200" labelField="name" requireSelection="false"
						change="onSelectedFlowChanged()"/>
			<s:ComboBox id="versionComboBox" dataProvider="{_versions}" labelField="value"
						requireSelection="true"
						change="onSelectedVersionChanged()"/>
		</s:HGroup>
		<s:Label text="Gross shows:"/>
		<s:Group height="100%"
				 width="100%">
			<mx:ColumnChart id="viewer"
							height="100%"
							width="100%"
							showDataTips="true"
							dataTipFunction="tipFunction"
							dataProvider="{_dataProvider}"
							styleName="customClass"
				>
				<mx:horizontalAxis>
					<mx:CategoryAxis id="horAxis" categoryField="entryLabel"/>
				</mx:horizontalAxis>
				<mx:verticalAxis>
					<mx:LinearAxis id="verAxis"/>
				</mx:verticalAxis>

				<mx:horizontalAxisRenderers>
					<mx:AxisRenderer axis="{horAxis}">
						<mx:axisStroke>{axisStroke}</mx:axisStroke>
					</mx:AxisRenderer>
				</mx:horizontalAxisRenderers>
				<mx:verticalAxisRenderers>
					<mx:AxisRenderer axis="{verAxis}">
						<mx:axisStroke>{axisStroke}</mx:axisStroke>
					</mx:AxisRenderer>
				</mx:verticalAxisRenderers>
				<mx:series>
					<mx:ColumnSeries
						labelPosition="outside"
						xField="entryLabel"
						labelFunction="entersLabelFunc"
						yField="enters"
						displayName="Дошли"
						>
						<mx:fill>
							<mx:SolidColor color="0x2266bb"/>
						</mx:fill>
						<mx:stroke>
							<mx:SolidColorStroke color="#000000"/>
						</mx:stroke>
					</mx:ColumnSeries>
					<mx:ColumnSeries
						labelPosition="outside"
						xField="entryLabel"
						labelFunction="paymentsLabelFunc"
						yField="payments"
						displayName="Оплатили"
						>
						<mx:fill>
							<mx:SolidColor color="#ff8100"/>
						</mx:fill>
						<mx:stroke>
							<mx:SolidColorStroke color="#000000"/>
						</mx:stroke>
					</mx:ColumnSeries>
				</mx:series>
			</mx:ColumnChart>
			<mx:Legend right="30" top="30" dataProvider="{viewer}" fontSize="24"/>
		</s:Group>
		<s:Button label="Назад на «{_project.displayName}»" click="goToProjectInfo()"/>
	</s:VGroup>
</presentation:PageBase>
